{"version":3,"sources":["components/Main/Banner/Img/profile.png","components/UI/Loading/Loading.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Loading","props","React","useEffect","window","scrollTo","Fragment","style","background","height","paddingTop","className","Main","lazy","App","Helmet","rel","href","Icon","Suspense","fallback","Container","target","Boolean","location","hostname","match","axios","defaults","baseURL","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,qC,6SC+B5BC,G,MA1BC,SAACC,GAQf,OALAC,IAAMC,WAAU,WACdC,OAAOC,SAAS,EAAG,KAClB,IAID,kBAAC,IAAMC,SAAP,KAEE,yBAAKC,MAAO,CAAEC,WAAY,OAAQC,OAAQ,QAASC,WAAY,SAC7D,yBAAKC,UAAU,4CACb,yBAAKA,UAAU,oBACb,8BACA,8BACA,6BAAK,+BACL,6BAAK,qCCNXC,EAAOV,IAAMW,MAAK,kBAAM,uDA+BfC,MA5Bf,WACE,OACE,yBAAKH,UAAU,OACb,kBAACI,EAAA,OAAD,KACE,0BAAMC,IAAI,OAAOC,KAAMC,OAGzB,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAACR,EAAD,MAEA,gCACE,kBAACS,EAAA,EAAD,KACE,yBAAKV,UAAU,8BAEb,sDAC0B,uBAAGM,KAAK,+BAA+BK,OAAO,SAASN,IAAI,sBAAsBL,UAAU,cAA3F,sBCvBtBY,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAAMC,SAASC,QAAUC,+BAEzBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3dc5eef3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.6661294f.png\";","// import {Helmet} from 'react-helmet'\r\nimport React from 'react';\r\n\r\nimport './Loading.scss';\r\n\r\nconst Loading = (props) => {\r\n\r\n  //useEffect\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <div style={{ background: \"#000\", height: '100vh', paddingTop: '30vh' }}>\r\n        <div className=\"loadingio-spinner-double-ring-w05zw5akjg\">\r\n          <div className=\"ldio-v6vw43dbn0h\">\r\n            <div></div>\r\n            <div></div>\r\n            <div><div></div></div>\r\n            <div><div></div></div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </React.Fragment >\r\n  );\r\n};\r\n\r\nexport default Loading;","import { Helmet } from 'react-helmet';\nimport React from 'react';\nimport {\n  BrowserRouter as Router\n} from 'react-router-dom';\n\nimport { Container } from 'reactstrap';\n\nimport './assets/vendor/css/bootstrap.css';\nimport './assets/vendor/css/animate.css';\nimport './assets/vendor/css/hover.css';\nimport './assets/styles/scss/styles.scss';\nimport Icon from './components/Main/Banner/Img/profile.png';\n\nimport Loading from './components/UI/Loading/Loading';\n\nconst Main = React.lazy(() => import('./components/Main/Main'));\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <link rel=\"icon\" href={Icon} />\n      </Helmet>\n\n      <Router>\n        <React.Suspense fallback={<Loading />}>\n          <Main />\n\n          <footer>\n            <Container>\n              <div className=\"d-flex justify-content-end\">\n\n                <p>\n                  design and developed by <a href=\"https://aharrfaris.github.io\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"mein-stamp\">AharrFaris</a>\n                </p>\n              </div>\n            </Container>\n          </footer>\n\n        </React.Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\naxios.defaults.baseURL = process.env.REACT_APP_API_LINK;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}